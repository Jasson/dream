!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADV_COL	deps/mochijson2/src/mochijson2.erl	/^-define(ADV_COL(S, N), S#decoder{offset=N+S#decoder.offset,$/;"	d
BIG_POW	deps/mochijson2/src/mochinum.erl	/^-define(BIG_POW, 4503599627370496).$/;"	d
CT_RUN	deps/ranch/Makefile	/^CT_RUN = ct_run \\$/;"	m
DEBUG	include/dream.hrl	/^-define(DEBUG(Inputs, Args), io:format(Inputs, Args)).$/;"	d
DEPS_DIR	deps/ranch/Makefile	/^DEPS_DIR ?= $(CURDIR)\/deps$/;"	m
ERLC_OPTS	deps/ranch/Makefile	/^ERLC_OPTS = -Werror +debug_info +warn_export_all # +bin_opt_info +warn_missing_spec$/;"	m
FLOAT_BIAS	deps/mochijson2/src/mochinum.erl	/^-define(FLOAT_BIAS, 1022).$/;"	d
INC_CHAR	deps/mochijson2/src/mochijson2.erl	/^-define(INC_CHAR(S, C),$/;"	d
INC_COL	deps/mochijson2/src/mochijson2.erl	/^-define(INC_COL(S), S#decoder{offset=1+S#decoder.offset,$/;"	d
INC_LINE	deps/mochijson2/src/mochijson2.erl	/^-define(INC_LINE(S), S#decoder{offset=1+S#decoder.offset,$/;"	d
IS_WHITESPACE	deps/mochijson2/src/mochijson2.erl	/^-define(IS_WHITESPACE(C),$/;"	d
MIN_EXP	deps/mochijson2/src/mochinum.erl	/^-define(MIN_EXP, -1074).$/;"	d
MODULES	deps/ranch/Makefile	/^MODULES = $(shell ls src\/*.erl | sed 's\/src\\\/\/\/;s\/\\.erl\/,\/' | sed '$$s\/.$$\/\/')$/;"	m
PROJECT	deps/ranch/Makefile	/^PROJECT = ranch$/;"	m
Q	deps/mochijson2/src/mochijson2.erl	/^-define(Q, $\\").$/;"	d
SUPERVISOR	deps/ranch/src/ranch_sup.erl	/^-define(SUPERVISOR, ?MODULE).$/;"	d
TAB	deps/ranch/src/ranch_server.erl	/^-define(TAB, ?MODULE).$/;"	d
V	deps/ranch/Makefile	/^V ?= 0$/;"	m
accept	deps/ranch/src/ranch_ssl.erl	/^accept(LSocket, Timeout) ->$/;"	f	module:ranch_ssl
accept	deps/ranch/src/ranch_tcp.erl	/^accept(LSocket, Timeout) ->$/;"	f	module:ranch_tcp
accept_ack	deps/ranch/src/ranch.erl	/^accept_ack(Ref) ->$/;"	f	module:ranch
acceptor_SUITE	deps/ranch/test/acceptor_SUITE.erl	/^-module(acceptor_SUITE).$/;"	m
action	src/action.erl	/^-module(action).$/;"	m
active_connections	deps/ranch/src/ranch_conns_sup.erl	/^active_connections(SupPid) ->$/;"	f	module:ranch_conns_sup
active_echo_protocol	deps/ranch/test/active_echo_protocol.erl	/^-module(active_echo_protocol).$/;"	m
all	deps/ranch/test/acceptor_SUITE.erl	/^all() ->$/;"	f	module:acceptor_SUITE
appsrc_verbose	deps/ranch/Makefile	/^appsrc_verbose = $(appsrc_verbose_$(V))$/;"	m
appsrc_verbose_0	deps/ranch/Makefile	/^appsrc_verbose_0 = @echo " APP   " $(PROJECT).app.src;$/;"	m
atom_test	deps/mochijson2/src/mochijson2.erl	/^atom_test() ->$/;"	f	module:mochijson2
big_unicode_test	deps/mochijson2/src/mochijson2.erl	/^big_unicode_test() ->$/;"	f	module:mochijson2
child_spec	deps/ranch/src/ranch.erl	/^child_spec(Ref, NbAcceptors, Transport, TransOpts, Protocol, ProtoOpts)$/;"	f	module:ranch
clean_traces	deps/ranch/test/acceptor_SUITE.erl	/^clean_traces() ->$/;"	f	module:acceptor_SUITE
cleanup_listener_opts	deps/ranch/src/ranch_server.erl	/^cleanup_listener_opts(Ref) ->$/;"	f	module:ranch_server
client	src/client.erl	/^-module(client).$/;"	m
client	src/client.erl	/^client() ->$/;"	f	module:client
close	deps/ranch/src/ranch_ssl.erl	/^close(Socket) ->$/;"	f	module:ranch_ssl
close	deps/ranch/src/ranch_tcp.erl	/^close(Socket) ->$/;"	f	module:ranch_tcp
close	src/client.erl	/^close(Sock) ->$/;"	f	module:client
code_change	deps/ranch/src/ranch_server.erl	/^code_change(_OldVsn, State, _Extra) ->$/;"	f	module:ranch_server
connect	deps/ranch/src/ranch_ssl.erl	/^connect(Host, Port, Opts) when is_integer(Port) ->$/;"	f	module:ranch_ssl
connect	deps/ranch/src/ranch_tcp.erl	/^connect(Host, Port, Opts) when is_integer(Port) ->$/;"	f	module:ranch_tcp
connect_loop	deps/ranch/test/acceptor_SUITE.erl	/^connect_loop(Port, N, Sleep) ->$/;"	f	module:acceptor_SUITE
connect_loop	deps/ranch/test/acceptor_SUITE.erl	/^connect_loop(_, 0, _) ->$/;"	f	module:acceptor_SUITE
consider_profiling	deps/ranch/src/ranch_app.erl	/^consider_profiling() ->$/;"	f	module:ranch_app
controlling_process	deps/ranch/src/ranch_ssl.erl	/^controlling_process(Socket, Pid) ->$/;"	f	module:ranch_ssl
controlling_process	deps/ranch/src/ranch_tcp.erl	/^controlling_process(Socket, Pid) ->$/;"	f	module:ranch_tcp
count_connections	deps/ranch/src/ranch_server.erl	/^count_connections(Ref) ->$/;"	f	module:ranch_server
custom_decoder_test	deps/mochijson2/src/mochijson2.erl	/^custom_decoder_test() ->$/;"	f	module:mochijson2
decode	deps/mochijson2/src/mochijson2.erl	/^decode(S) ->$/;"	f	module:mochijson2
decode1	deps/mochijson2/src/mochijson2.erl	/^decode1(B, S=#decoder{state=null}) ->$/;"	f	module:mochijson2
decode_array	deps/mochijson2/src/mochijson2.erl	/^decode_array(B, S) ->$/;"	f	module:mochijson2
decode_array	deps/mochijson2/src/mochijson2.erl	/^decode_array(B, S=#decoder{state=any}, Acc) ->$/;"	f	module:mochijson2
decode_array	deps/mochijson2/src/mochijson2.erl	/^decode_array(B, S=#decoder{state=comma}, Acc) ->$/;"	f	module:mochijson2
decode_object	deps/mochijson2/src/mochijson2.erl	/^decode_object(B, S) ->$/;"	f	module:mochijson2
decode_object	deps/mochijson2/src/mochijson2.erl	/^decode_object(B, S=#decoder{state=comma}, Acc) ->$/;"	f	module:mochijson2
decode_object	deps/mochijson2/src/mochijson2.erl	/^decode_object(B, S=#decoder{state=key}, Acc) ->$/;"	f	module:mochijson2
decode_test	deps/mochijson2/src/mochijson2.erl	/^decode_test() ->$/;"	f	module:mochijson2
decoder	deps/mochijson2/src/mochijson2.erl	/^-record(decoder, {object_hook=null,$/;"	r
decoder	deps/mochijson2/src/mochijson2.erl	/^decoder(Options) ->$/;"	f	module:mochijson2
digits	deps/mochijson2/src/mochinum.erl	/^digits(0.0) ->$/;"	f	module:mochinum
digits	deps/mochijson2/src/mochinum.erl	/^digits(Float) ->$/;"	f	module:mochinum
digits	deps/mochijson2/src/mochinum.erl	/^digits(N) when is_integer(N) ->$/;"	f	module:mochinum
digits1	deps/mochijson2/src/mochinum.erl	/^digits1(Float, Exp, Frac) ->$/;"	f	module:mochinum
digits_test	deps/mochijson2/src/mochinum.erl	/^digits_test() ->$/;"	f	module:mochinum
dream	src/dream.erl	/^-module(dream).$/;"	m
dream_app	src/dream_app.erl	/^-module(dream_app).$/;"	m
dream_protocol	src/dream_protocol.erl	/^-module(dream_protocol).$/;"	m
dream_sup	src/dream_sup.erl	/^-module(dream_sup).$/;"	m
e2j_test_vec	deps/mochijson2/src/mochijson2.erl	/^e2j_test_vec(utf8) ->$/;"	f	module:mochijson2
e2j_vec_test	deps/mochijson2/src/mochijson2.erl	/^e2j_vec_test() ->$/;"	f	module:mochijson2
echo_protocol	deps/ranch/examples/tcp_echo/src/echo_protocol.erl	/^-module(echo_protocol).$/;"	m
echo_protocol	deps/ranch/test/echo_protocol.erl	/^-module(echo_protocol).$/;"	m
encode	deps/mochijson2/src/mochijson2.erl	/^encode(Any) ->$/;"	f	module:mochijson2
encoder	deps/mochijson2/src/mochijson2.erl	/^-record(encoder, {handler=null,$/;"	r
encoder	deps/mochijson2/src/mochijson2.erl	/^encoder(Options) ->$/;"	f	module:mochijson2
encoder_utf8_test	deps/mochijson2/src/mochijson2.erl	/^encoder_utf8_test() ->$/;"	f	module:mochijson2
end_per_group	deps/ranch/test/acceptor_SUITE.erl	/^end_per_group(_, _) ->$/;"	f	module:acceptor_SUITE
end_per_group	deps/ranch/test/acceptor_SUITE.erl	/^end_per_group(ssl, _) ->$/;"	f	module:acceptor_SUITE
end_per_suite	deps/ranch/test/acceptor_SUITE.erl	/^end_per_suite(_) ->$/;"	f	module:acceptor_SUITE
equiv	deps/mochijson2/src/mochijson2.erl	/^equiv(A, A) when A =:= true orelse A =:= false orelse A =:= null -> true.$/;"	f	module:mochijson2
equiv	deps/mochijson2/src/mochijson2.erl	/^equiv(B1, B2) when is_binary(B1), is_binary(B2) -> B1 == B2;$/;"	f	module:mochijson2
equiv	deps/mochijson2/src/mochijson2.erl	/^equiv(L1, L2) when is_list(L1), is_list(L2) ->$/;"	f	module:mochijson2
equiv	deps/mochijson2/src/mochijson2.erl	/^equiv(N1, N2) when is_number(N1), is_number(N2) -> N1 == N2;$/;"	f	module:mochijson2
equiv	deps/mochijson2/src/mochijson2.erl	/^equiv({struct, Props1}, {struct, Props2}) ->$/;"	f	module:mochijson2
equiv_list	deps/mochijson2/src/mochijson2.erl	/^equiv_list([V1 | L1], [V2 | L2]) ->$/;"	f	module:mochijson2
equiv_list	deps/mochijson2/src/mochijson2.erl	/^equiv_list([], []) ->$/;"	f	module:mochijson2
equiv_object	deps/mochijson2/src/mochijson2.erl	/^equiv_object(Props1, Props2) ->$/;"	f	module:mochijson2
erlc_verbose	deps/ranch/Makefile	/^erlc_verbose = $(erlc_verbose_$(V))$/;"	m
erlc_verbose_0	deps/ranch/Makefile	/^erlc_verbose_0 = @echo " ERLC  " $(?F);$/;"	m
filter_options	deps/ranch/src/ranch.erl	/^filter_options([Opt = {Key, _}|Tail], AllowedKeys, Acc) ->$/;"	f	module:ranch
filter_options	deps/ranch/src/ranch.erl	/^filter_options([Opt = {raw, _, _, _}|Tail], AllowedKeys, Acc) ->$/;"	f	module:ranch
filter_options	deps/ranch/src/ranch.erl	/^filter_options([], _, Acc) ->$/;"	f	module:ranch
fixup	deps/mochijson2/src/mochinum.erl	/^fixup(R, S, MPlus, MMinus, K, LowOk, HighOk) ->$/;"	f	module:mochinum
float_fallback_test	deps/mochijson2/src/mochijson2.erl	/^float_fallback_test() ->$/;"	f	module:mochijson2
frexp	deps/mochijson2/src/mochinum.erl	/^frexp(F) ->$/;"	f	module:mochinum
frexp1	deps/mochijson2/src/mochinum.erl	/^frexp1({Sign, 0, Frac}) ->$/;"	f	module:mochinum
frexp1	deps/mochijson2/src/mochinum.erl	/^frexp1({Sign, Exp, Frac}) ->$/;"	f	module:mochinum
frexp1	deps/mochijson2/src/mochinum.erl	/^frexp1({_Sign, 0, 0}) ->$/;"	f	module:mochinum
frexp_test	deps/mochijson2/src/mochinum.erl	/^frexp_test() ->$/;"	f	module:mochinum
gen_verbose	deps/ranch/Makefile	/^gen_verbose = $(gen_verbose_$(V))$/;"	m
gen_verbose_0	deps/ranch/Makefile	/^gen_verbose_0 = @echo " GEN   " $@;$/;"	m
generate	deps/mochijson2/src/mochinum.erl	/^generate(R0, S, MPlus, MMinus, LowOk, HighOk) ->$/;"	f	module:mochinum
get_action	src/action.erl	/^get_action("login") ->$/;"	f	module:action
get_action	src/action.erl	/^get_action(_Ingore) ->$/;"	f	module:action
get_connections_sup	deps/ranch/src/ranch_server.erl	/^get_connections_sup(Ref) ->$/;"	f	module:ranch_server
get_max_connections	deps/ranch/src/ranch.erl	/^get_max_connections(Ref) ->$/;"	f	module:ranch
get_max_connections	deps/ranch/src/ranch_server.erl	/^get_max_connections(Ref) ->$/;"	f	module:ranch_server
get_port	deps/ranch/src/ranch.erl	/^get_port(Ref) ->$/;"	f	module:ranch
get_port	deps/ranch/src/ranch_server.erl	/^get_port(Ref) ->$/;"	f	module:ranch_server
get_protocol_options	deps/ranch/src/ranch.erl	/^get_protocol_options(Ref) ->$/;"	f	module:ranch
get_protocol_options	deps/ranch/src/ranch_server.erl	/^get_protocol_options(Ref) ->$/;"	f	module:ranch_server
get_socket	src/client.erl	/^get_socket() ->$/;"	f	module:client
get_value	src/dream_protocol.erl	/^get_value(Name, List) ->$/;"	f	module:dream_protocol
get_value	src/dream_protocol.erl	/^get_value(Name, List) when is_list(Name)->$/;"	f	module:dream_protocol
groups	deps/ranch/test/acceptor_SUITE.erl	/^groups() ->$/;"	f	module:acceptor_SUITE
handle_call	deps/ranch/src/ranch_server.erl	/^handle_call(_Request, _From, State) ->$/;"	f	module:ranch_server
handle_call	deps/ranch/src/ranch_server.erl	/^handle_call({set_connections_sup, Ref, Pid}, _,$/;"	f	module:ranch_server
handle_call	deps/ranch/src/ranch_server.erl	/^handle_call({set_max_conns, Ref, MaxConns}, _, State) ->$/;"	f	module:ranch_server
handle_call	deps/ranch/src/ranch_server.erl	/^handle_call({set_new_listener_opts, Ref, MaxConns, Opts}, _, State) ->$/;"	f	module:ranch_server
handle_call	deps/ranch/src/ranch_server.erl	/^handle_call({set_opts, Ref, Opts}, _, State) ->$/;"	f	module:ranch_server
handle_call	deps/ranch/src/ranch_server.erl	/^handle_call({set_port, Ref, Port}, _, State) ->$/;"	f	module:ranch_server
handle_cast	deps/ranch/src/ranch_server.erl	/^handle_cast(_Request, State) ->$/;"	f	module:ranch_server
handle_info	deps/ranch/src/ranch_server.erl	/^handle_info(_Info, State) ->$/;"	f	module:ranch_server
handle_info	deps/ranch/src/ranch_server.erl	/^handle_info({'DOWN', MonitorRef, process, Pid, _},$/;"	f	module:ranch_server
handler_test	deps/mochijson2/src/mochijson2.erl	/^handler_test() ->$/;"	f	module:mochijson2
hex	src/md5.erl	/^hex(N) when N < 10 ->$/;"	f	module:md5
hex	src/md5.erl	/^hex(N) when N >= 10, N < 16 ->$/;"	f	module:md5
hexdigit	deps/mochijson2/src/mochijson2.erl	/^hexdigit(C) when C =< 15 ->$/;"	f	module:mochijson2
hexdigit	deps/mochijson2/src/mochijson2.erl	/^hexdigit(C) when C >= 0, C =< 9 ->$/;"	f	module:mochijson2
init	deps/ranch/examples/tcp_echo/src/echo_protocol.erl	/^init(Ref, Socket, Transport, _Opts = []) ->$/;"	f	module:echo_protocol
init	deps/ranch/examples/tcp_echo/src/tcp_echo_sup.erl	/^init([]) ->$/;"	f	module:tcp_echo_sup
init	deps/ranch/src/ranch_acceptors_sup.erl	/^init([Ref, NbAcceptors, Transport, TransOpts]) ->$/;"	f	module:ranch_acceptors_sup
init	deps/ranch/src/ranch_conns_sup.erl	/^init(Parent, Ref, Transport, Protocol) ->$/;"	f	module:ranch_conns_sup
init	deps/ranch/src/ranch_listener_sup.erl	/^init({Ref, NbAcceptors, Transport, TransOpts, Protocol}) ->$/;"	f	module:ranch_listener_sup
init	deps/ranch/src/ranch_server.erl	/^init([]) ->$/;"	f	module:ranch_server
init	deps/ranch/src/ranch_sup.erl	/^init([]) ->$/;"	f	module:ranch_sup
init	deps/ranch/test/active_echo_protocol.erl	/^init(Ref, Socket, Transport, _Opts = []) ->$/;"	f	module:active_echo_protocol
init	deps/ranch/test/echo_protocol.erl	/^init(Ref, Socket, Transport, _Opts = []) ->$/;"	f	module:echo_protocol
init	deps/ranch/test/notify_and_wait_protocol.erl	/^init(Msg, Pid) ->$/;"	f	module:notify_and_wait_protocol
init	deps/ranch/test/remove_conn_and_wait_protocol.erl	/^init(Ref, MaybeRemove) ->$/;"	f	module:remove_conn_and_wait_protocol
init	src/dream_protocol.erl	/^init(Ref, Socket, Transport, _Opts = []) ->$/;"	f	module:dream_protocol
init	src/dream_sup.erl	/^init([]) ->$/;"	f	module:dream_sup
init_per_group	deps/ranch/test/acceptor_SUITE.erl	/^init_per_group(_, Config) ->$/;"	f	module:acceptor_SUITE
init_per_group	deps/ranch/test/acceptor_SUITE.erl	/^init_per_group(ssl, Config) ->$/;"	f	module:acceptor_SUITE
init_per_suite	deps/ranch/test/acceptor_SUITE.erl	/^init_per_suite(Config) ->$/;"	f	module:acceptor_SUITE
inline_json_test	deps/mochijson2/src/mochijson2.erl	/^inline_json_test() ->$/;"	f	module:mochijson2
input_validation_test	deps/mochijson2/src/mochijson2.erl	/^input_validation_test() ->$/;"	f	module:mochijson2
insert_decimal	deps/mochijson2/src/mochinum.erl	/^insert_decimal(0, S) ->$/;"	f	module:mochinum
insert_decimal	deps/mochijson2/src/mochinum.erl	/^insert_decimal(Place, S) ->$/;"	f	module:mochinum
insert_decimal	deps/mochijson2/src/mochinum.erl	/^insert_decimal(Place, S) when Place > -6 ->$/;"	f	module:mochinum
insert_decimal	deps/mochijson2/src/mochinum.erl	/^insert_decimal(Place, S) when Place > 0 ->$/;"	f	module:mochinum
insert_decimal_exp	deps/mochijson2/src/mochinum.erl	/^insert_decimal_exp(Place, S) ->$/;"	f	module:mochinum
int_ceil	deps/mochijson2/src/mochinum.erl	/^int_ceil(X) ->$/;"	f	module:mochinum
int_ceil_test	deps/mochijson2/src/mochinum.erl	/^int_ceil_test() ->$/;"	f	module:mochinum
int_pow	deps/mochijson2/src/mochinum.erl	/^int_pow(X, N) when N > 0 ->$/;"	f	module:mochinum
int_pow	deps/mochijson2/src/mochinum.erl	/^int_pow(X, N, R) ->$/;"	f	module:mochinum
int_pow	deps/mochijson2/src/mochinum.erl	/^int_pow(X, N, R) when N < 2 ->$/;"	f	module:mochinum
int_pow	deps/mochijson2/src/mochinum.erl	/^int_pow(_X, 0) ->$/;"	f	module:mochinum
int_pow_test	deps/mochijson2/src/mochinum.erl	/^int_pow_test() ->$/;"	f	module:mochinum
int_test	deps/mochijson2/src/mochijson2.erl	/^int_test() ->$/;"	f	module:mochijson2
is_obj	deps/mochijson2/src/mochijson2.erl	/^is_obj({struct, Props}) ->$/;"	f	module:mochijson2
json_bin_is_safe	deps/mochijson2/src/mochijson2.erl	/^json_bin_is_safe(<<>>) ->$/;"	f	module:mochijson2
json_bin_is_safe	deps/mochijson2/src/mochijson2.erl	/^json_bin_is_safe(<<C, Rest\/binary>>) ->$/;"	f	module:mochijson2
json_decode	deps/mochijson2/src/mochijson2.erl	/^json_decode(B, S) ->$/;"	f	module:mochijson2
json_decode	deps/mochijson2/src/mochijson2.erl	/^json_decode(L, S) when is_list(L) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode(Array, State) when is_list(Array) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode(Bad, #encoder{handler=null}) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode(Bad, State=#encoder{handler=Handler}) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode(F, _State) when is_float(F) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode(I, _State) when is_integer(I) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode(I, _State) when is_integer(I) andalso I >= -2147483648 andalso I =< 2147483647 ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode(S, State) when is_binary(S); is_atom(S) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode(false, _State) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode(null, _State) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode(true, _State) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode({json, IoList}, _State) ->$/;"	f	module:mochijson2
json_encode	deps/mochijson2/src/mochijson2.erl	/^json_encode({struct, Props}, State) when is_list(Props) ->$/;"	f	module:mochijson2
json_encode_array	deps/mochijson2/src/mochijson2.erl	/^json_encode_array(L, State) ->$/;"	f	module:mochijson2
json_encode_array	deps/mochijson2/src/mochijson2.erl	/^json_encode_array([], _State) ->$/;"	f	module:mochijson2
json_encode_proplist	deps/mochijson2/src/mochijson2.erl	/^json_encode_proplist(Props, State) ->$/;"	f	module:mochijson2
json_encode_proplist	deps/mochijson2/src/mochijson2.erl	/^json_encode_proplist([], _State) ->$/;"	f	module:mochijson2
json_encode_string	deps/mochijson2/src/mochijson2.erl	/^json_encode_string(A, State) when is_atom(A) ->$/;"	f	module:mochijson2
json_encode_string	deps/mochijson2/src/mochijson2.erl	/^json_encode_string(B, State) when is_binary(B) ->$/;"	f	module:mochijson2
json_encode_string	deps/mochijson2/src/mochijson2.erl	/^json_encode_string(I, _State) when is_integer(I) ->$/;"	f	module:mochijson2
json_encode_string	deps/mochijson2/src/mochijson2.erl	/^json_encode_string(L, State) when is_list(L) ->$/;"	f	module:mochijson2
json_encode_string_unicode	deps/mochijson2/src/mochijson2.erl	/^json_encode_string_unicode([C | Cs], State, Acc) ->$/;"	f	module:mochijson2
json_encode_string_unicode	deps/mochijson2/src/mochijson2.erl	/^json_encode_string_unicode([], _State, Acc) ->$/;"	f	module:mochijson2
json_string_is_safe	deps/mochijson2/src/mochijson2.erl	/^json_string_is_safe([C | Rest]) ->$/;"	f	module:mochijson2
json_string_is_safe	deps/mochijson2/src/mochijson2.erl	/^json_string_is_safe([]) ->$/;"	f	module:mochijson2
key_encode_test	deps/mochijson2/src/mochijson2.erl	/^key_encode_test() ->$/;"	f	module:mochijson2
list_to_hex	src/md5.erl	/^list_to_hex(L) ->$/;"	f	module:md5
listen	deps/ranch/src/ranch_ssl.erl	/^listen(Opts) ->$/;"	f	module:ranch_ssl
listen	deps/ranch/src/ranch_tcp.erl	/^listen(Opts) ->$/;"	f	module:ranch_tcp
log2floor	deps/mochijson2/src/mochinum.erl	/^log2floor(0, N) ->$/;"	f	module:mochinum
log2floor	deps/mochijson2/src/mochinum.erl	/^log2floor(Int) ->$/;"	f	module:mochinum
log2floor	deps/mochijson2/src/mochinum.erl	/^log2floor(Int, N) ->$/;"	f	module:mochinum
login	src/users_controller.erl	/^login(#state{socket=From, tp=Tp}, Data) ->$/;"	f	module:users_controller
loop	deps/ranch/examples/tcp_echo/src/echo_protocol.erl	/^loop(Socket, Transport) ->$/;"	f	module:echo_protocol
loop	deps/ranch/src/ranch_acceptor.erl	/^loop(LSocket, Transport, ConnsSup) ->$/;"	f	module:ranch_acceptor
loop	deps/ranch/src/ranch_conns_sup.erl	/^loop(State=#state{parent=Parent, ref=Ref,$/;"	f	module:ranch_conns_sup
loop	deps/ranch/test/active_echo_protocol.erl	/^loop(Socket, Transport) ->$/;"	f	module:active_echo_protocol
loop	deps/ranch/test/echo_protocol.erl	/^loop(Socket, Transport) ->$/;"	f	module:echo_protocol
loop	src/dream_protocol.erl	/^loop(#state{socket=Socket, tp=Transport, connect="connected"}=State) ->$/;"	f	module:dream_protocol
loop	src/dream_protocol.erl	/^loop(#state{socket=Socket, tp=Transport, connect="connecting"}=State) ->$/;"	f	module:dream_protocol
make_object	deps/mochijson2/src/mochijson2.erl	/^make_object(V, #decoder{object_hook=Hook}) ->$/;"	f	module:mochijson2
make_object	deps/mochijson2/src/mochijson2.erl	/^make_object(V, #decoder{object_hook=null}) ->$/;"	f	module:mochijson2
md5	src/md5.erl	/^-module(md5).$/;"	m
md5_hex	src/md5.erl	/^md5_hex(S) ->$/;"	f	module:md5
messages	deps/ranch/src/ranch_ssl.erl	/^messages() -> {ssl, ssl_closed, ssl_error}.$/;"	f	module:ranch_ssl
messages	deps/ranch/src/ranch_tcp.erl	/^messages() -> {tcp, tcp_closed, tcp_error}.$/;"	f	module:ranch_tcp
misc_bad_transport	deps/ranch/test/acceptor_SUITE.erl	/^misc_bad_transport(_) ->$/;"	f	module:acceptor_SUITE
mochijson2	deps/mochijson2/src/mochijson2.erl	/^-module(mochijson2).$/;"	m
mochinum	deps/mochijson2/src/mochinum.erl	/^-module(mochinum).$/;"	m
name	deps/ranch/src/ranch_ssl.erl	/^name() -> ssl.$/;"	f	module:ranch_ssl
name	deps/ranch/src/ranch_tcp.erl	/^name() -> tcp.$/;"	f	module:ranch_tcp
notify_and_wait_protocol	deps/ranch/test/notify_and_wait_protocol.erl	/^-module(notify_and_wait_protocol).$/;"	m
obj_from_list	deps/mochijson2/src/mochijson2.erl	/^obj_from_list(Props) ->$/;"	f	module:mochijson2
obj_new	deps/mochijson2/src/mochijson2.erl	/^obj_new() ->$/;"	f	module:mochijson2
parse	src/dream_protocol.erl	/^parse("users\/"++ActionStr, #state{}=State, Data) ->$/;"	f	module:dream_protocol
parse	src/dream_protocol.erl	/^parse(_Ignore, State, Data) ->$/;"	f	module:dream_protocol
parse_author	src/dream_protocol.erl	/^parse_author("users\/login", #state{}=State, Data) ->$/;"	f	module:dream_protocol
parse_decoder_options	deps/mochijson2/src/mochijson2.erl	/^parse_decoder_options([], State) ->$/;"	f	module:mochijson2
parse_decoder_options	deps/mochijson2/src/mochijson2.erl	/^parse_decoder_options([{object_hook, Hook} | Rest], State) ->$/;"	f	module:mochijson2
parse_encoder_options	deps/mochijson2/src/mochijson2.erl	/^parse_encoder_options([], State) ->$/;"	f	module:mochijson2
parse_encoder_options	deps/mochijson2/src/mochijson2.erl	/^parse_encoder_options([{handler, Handler} | Rest], State) ->$/;"	f	module:mochijson2
parse_encoder_options	deps/mochijson2/src/mochijson2.erl	/^parse_encoder_options([{utf8, Switch} | Rest], State) ->$/;"	f	module:mochijson2
peername	deps/ranch/src/ranch_ssl.erl	/^peername(Socket) ->$/;"	f	module:ranch_ssl
peername	deps/ranch/src/ranch_tcp.erl	/^peername(Socket) ->$/;"	f	module:ranch_tcp
profile_output	deps/ranch/src/ranch_app.erl	/^profile_output() ->$/;"	f	module:ranch_app
ranch	deps/ranch/src/ranch.erl	/^-module(ranch).$/;"	m
ranch_acceptor	deps/ranch/src/ranch_acceptor.erl	/^-module(ranch_acceptor).$/;"	m
ranch_acceptors_sup	deps/ranch/src/ranch_acceptors_sup.erl	/^-module(ranch_acceptors_sup).$/;"	m
ranch_app	deps/ranch/src/ranch_app.erl	/^-module(ranch_app).$/;"	m
ranch_conns_sup	deps/ranch/src/ranch_conns_sup.erl	/^-module(ranch_conns_sup).$/;"	m
ranch_listener_sup	deps/ranch/src/ranch_listener_sup.erl	/^-module(ranch_listener_sup).$/;"	m
ranch_protocol	deps/ranch/src/ranch_protocol.erl	/^-module(ranch_protocol).$/;"	m
ranch_server	deps/ranch/src/ranch_server.erl	/^-module(ranch_server).$/;"	m
ranch_ssl	deps/ranch/src/ranch_ssl.erl	/^-module(ranch_ssl).$/;"	m
ranch_sup	deps/ranch/src/ranch_sup.erl	/^-module(ranch_sup).$/;"	m
ranch_tcp	deps/ranch/src/ranch_tcp.erl	/^-module(ranch_tcp).$/;"	m
ranch_transport	deps/ranch/src/ranch_transport.erl	/^-module(ranch_transport).$/;"	m
receive_loop	deps/ranch/test/acceptor_SUITE.erl	/^receive_loop(Message, Timeout) ->$/;"	f	module:acceptor_SUITE
receive_loop	deps/ranch/test/acceptor_SUITE.erl	/^receive_loop(Message, Timeout, N) ->$/;"	f	module:acceptor_SUITE
recv	deps/ranch/src/ranch_ssl.erl	/^recv(Socket, Length, Timeout) ->$/;"	f	module:ranch_ssl
recv	deps/ranch/src/ranch_tcp.erl	/^recv(Socket, Length, Timeout) ->$/;"	f	module:ranch_tcp
remove_conn_and_wait_protocol	deps/ranch/test/remove_conn_and_wait_protocol.erl	/^-module(remove_conn_and_wait_protocol).$/;"	m
remove_connection	deps/ranch/src/ranch.erl	/^remove_connection(Ref) ->$/;"	f	module:ranch
require	deps/ranch/src/ranch.erl	/^require([App|Tail]) ->$/;"	f	module:ranch
require	deps/ranch/src/ranch.erl	/^require([]) ->$/;"	f	module:ranch
scale	deps/mochijson2/src/mochinum.erl	/^scale(R, S, MPlus, MMinus, LowOk, HighOk, Float) ->$/;"	f	module:mochinum
send	deps/ranch/src/ranch_ssl.erl	/^send(Socket, Packet) ->$/;"	f	module:ranch_ssl
send	deps/ranch/src/ranch_tcp.erl	/^send(Socket, Packet) ->$/;"	f	module:ranch_tcp
send	src/client.erl	/^send(Socket, Msg) ->$/;"	f	module:client
send	src/client.erl	/^send(Socket, N) when is_integer(N)->$/;"	f	module:client
sendfile	deps/ranch/src/ranch_ssl.erl	/^sendfile(Socket, Filepath) ->$/;"	f	module:ranch_ssl
sendfile	deps/ranch/src/ranch_ssl.erl	/^sendfile(Socket, IoDevice, Sent) ->$/;"	f	module:ranch_ssl
sendfile	deps/ranch/src/ranch_tcp.erl	/^sendfile(Socket, Filename) ->$/;"	f	module:ranch_tcp
set_connections_sup	deps/ranch/src/ranch_server.erl	/^set_connections_sup(Ref, Pid) ->$/;"	f	module:ranch_server
set_max_connections	deps/ranch/src/ranch.erl	/^set_max_connections(Ref, MaxConnections) ->$/;"	f	module:ranch
set_max_connections	deps/ranch/src/ranch_server.erl	/^set_max_connections(Ref, MaxConnections) ->$/;"	f	module:ranch_server
set_new_listener_opts	deps/ranch/src/ranch_server.erl	/^set_new_listener_opts(Ref, MaxConns, Opts) ->$/;"	f	module:ranch_server
set_option_default	deps/ranch/src/ranch.erl	/^set_option_default(Opts, Key, Value) ->$/;"	f	module:ranch
set_port	deps/ranch/src/ranch_server.erl	/^set_port(Ref, Port) ->$/;"	f	module:ranch_server
set_protocol_options	deps/ranch/src/ranch.erl	/^set_protocol_options(Ref, Opts) ->$/;"	f	module:ranch
set_protocol_options	deps/ranch/src/ranch_server.erl	/^set_protocol_options(Ref, ProtoOpts) ->$/;"	f	module:ranch_server
setopts	deps/ranch/src/ranch_ssl.erl	/^setopts(Socket, Opts) ->$/;"	f	module:ranch_ssl
setopts	deps/ranch/src/ranch_tcp.erl	/^setopts(Socket, Opts) ->$/;"	f	module:ranch_tcp
sockname	deps/ranch/src/ranch_ssl.erl	/^sockname(Socket) ->$/;"	f	module:ranch_ssl
sockname	deps/ranch/src/ranch_tcp.erl	/^sockname(Socket) ->$/;"	f	module:ranch_tcp
ssl_accept	deps/ranch/src/ranch_ssl.erl	/^ssl_accept(Socket, Timeout) ->$/;"	f	module:ranch_ssl
ssl_accept	deps/ranch/src/ranch_ssl.erl	/^ssl_accept(Socket, infinity) ->$/;"	f	module:ranch_ssl
ssl_accept_error	deps/ranch/test/acceptor_SUITE.erl	/^ssl_accept_error(Config) ->$/;"	f	module:acceptor_SUITE
ssl_accept_socket	deps/ranch/test/acceptor_SUITE.erl	/^ssl_accept_socket(Config) ->$/;"	f	module:acceptor_SUITE
ssl_active_echo	deps/ranch/test/acceptor_SUITE.erl	/^ssl_active_echo(Config) ->$/;"	f	module:acceptor_SUITE
ssl_echo	deps/ranch/test/acceptor_SUITE.erl	/^ssl_echo(Config) ->$/;"	f	module:acceptor_SUITE
start	deps/ranch/examples/tcp_echo/src/tcp_echo.erl	/^start() ->$/;"	f	module:tcp_echo
start	deps/ranch/examples/tcp_echo/src/tcp_echo_app.erl	/^start(_Type, _Args) ->$/;"	f	module:tcp_echo_app
start	deps/ranch/src/ranch_app.erl	/^start(_, _) ->$/;"	f	module:ranch_app
start	src/dream.erl	/^start() ->$/;"	f	module:dream
start	src/dream_app.erl	/^start(_Type, _Args) ->$/;"	f	module:dream_app
start_link	deps/ranch/examples/tcp_echo/src/echo_protocol.erl	/^start_link(Ref, Socket, Transport, Opts) ->$/;"	f	module:echo_protocol
start_link	deps/ranch/examples/tcp_echo/src/tcp_echo_sup.erl	/^start_link() ->$/;"	f	module:tcp_echo_sup
start_link	deps/ranch/src/ranch_acceptor.erl	/^start_link(LSocket, Transport, ConnsSup) ->$/;"	f	module:ranch_acceptor
start_link	deps/ranch/src/ranch_acceptors_sup.erl	/^start_link(Ref, NbAcceptors, Transport, TransOpts) ->$/;"	f	module:ranch_acceptors_sup
start_link	deps/ranch/src/ranch_conns_sup.erl	/^start_link(Ref, Transport, Protocol) ->$/;"	f	module:ranch_conns_sup
start_link	deps/ranch/src/ranch_listener_sup.erl	/^start_link(Ref, NbAcceptors, Transport, TransOpts, Protocol, ProtoOpts) ->$/;"	f	module:ranch_listener_sup
start_link	deps/ranch/src/ranch_server.erl	/^start_link() ->$/;"	f	module:ranch_server
start_link	deps/ranch/src/ranch_sup.erl	/^start_link() ->$/;"	f	module:ranch_sup
start_link	deps/ranch/test/active_echo_protocol.erl	/^start_link(Ref, Socket, Transport, Opts) ->$/;"	f	module:active_echo_protocol
start_link	deps/ranch/test/echo_protocol.erl	/^start_link(Ref, Socket, Transport, Opts) ->$/;"	f	module:echo_protocol
start_link	deps/ranch/test/notify_and_wait_protocol.erl	/^start_link(_, _, _, [{msg, Msg}, {pid, TestPid}]) ->$/;"	f	module:notify_and_wait_protocol
start_link	deps/ranch/test/remove_conn_and_wait_protocol.erl	/^start_link(Ref, _, _, [{remove, MaybeRemove}]) ->$/;"	f	module:remove_conn_and_wait_protocol
start_link	src/dream_protocol.erl	/^start_link(Ref, Socket, Transport, Opts) ->$/;"	f	module:dream_protocol
start_link	src/dream_sup.erl	/^start_link() ->$/;"	f	module:dream_sup
start_listener	deps/ranch/src/ranch.erl	/^start_listener(Ref, NbAcceptors, Transport, TransOpts, Protocol, ProtoOpts)$/;"	f	module:ranch
start_protocol	deps/ranch/src/ranch_conns_sup.erl	/^start_protocol(SupPid, Socket) ->$/;"	f	module:ranch_conns_sup
state	deps/ranch/src/ranch_conns_sup.erl	/^-record(state, {$/;"	r
state	deps/ranch/src/ranch_server.erl	/^-record(state, {$/;"	r
state	include/dream.hrl	/^-record(state,{socket="", tp="", user_name="", connect=""}).$/;"	r
stop	deps/ranch/examples/tcp_echo/src/tcp_echo_app.erl	/^stop(_State) ->$/;"	f	module:tcp_echo_app
stop	deps/ranch/src/ranch_app.erl	/^stop(_) ->$/;"	f	module:ranch_app
stop	src/dream_app.erl	/^stop(_State) ->$/;"	f	module:dream_app
stop_listener	deps/ranch/src/ranch.erl	/^stop_listener(Ref) ->$/;"	f	module:ranch
supervisor_clean_child_restart	deps/ranch/test/acceptor_SUITE.erl	/^supervisor_clean_child_restart(_) ->$/;"	f	module:acceptor_SUITE
supervisor_clean_conns_sup_restart	deps/ranch/test/acceptor_SUITE.erl	/^supervisor_clean_conns_sup_restart(_) ->$/;"	f	module:acceptor_SUITE
supervisor_clean_restart	deps/ranch/test/acceptor_SUITE.erl	/^supervisor_clean_restart(_) ->$/;"	f	module:acceptor_SUITE
supervisor_conns_alive	deps/ranch/test/acceptor_SUITE.erl	/^supervisor_conns_alive(_) ->$/;"	f	module:acceptor_SUITE
supervisor_server_recover_state	deps/ranch/test/acceptor_SUITE.erl	/^supervisor_server_recover_state(_) ->$/;"	f	module:acceptor_SUITE
system_code_change	deps/ranch/src/ranch_conns_sup.erl	/^system_code_change(Misc, _, _, _) ->$/;"	f	module:ranch_conns_sup
system_continue	deps/ranch/src/ranch_conns_sup.erl	/^system_continue(_, _, {State, CurConns, NbChildren, Sleepers}) ->$/;"	f	module:ranch_conns_sup
system_terminate	deps/ranch/src/ranch_conns_sup.erl	/^system_terminate(Reason, _, _, _) ->$/;"	f	module:ranch_conns_sup
tcp_accept_socket	deps/ranch/test/acceptor_SUITE.erl	/^tcp_accept_socket(_) ->$/;"	f	module:acceptor_SUITE
tcp_active_echo	deps/ranch/test/acceptor_SUITE.erl	/^tcp_active_echo(_) ->$/;"	f	module:acceptor_SUITE
tcp_clean_set_max_connections	deps/ranch/test/acceptor_SUITE.erl	/^tcp_clean_set_max_connections(_) ->$/;"	f	module:acceptor_SUITE
tcp_echo	deps/ranch/examples/tcp_echo/src/tcp_echo.erl	/^-module(tcp_echo).$/;"	m
tcp_echo	deps/ranch/test/acceptor_SUITE.erl	/^tcp_echo(_) ->$/;"	f	module:acceptor_SUITE
tcp_echo_app	deps/ranch/examples/tcp_echo/src/tcp_echo_app.erl	/^-module(tcp_echo_app).$/;"	m
tcp_echo_sup	deps/ranch/examples/tcp_echo/src/tcp_echo_sup.erl	/^-module(tcp_echo_sup).$/;"	m
tcp_infinity_max_connections	deps/ranch/test/acceptor_SUITE.erl	/^tcp_infinity_max_connections(_) ->$/;"	f	module:acceptor_SUITE
tcp_max_connections	deps/ranch/test/acceptor_SUITE.erl	/^tcp_max_connections(_) ->$/;"	f	module:acceptor_SUITE
tcp_max_connections_and_beyond	deps/ranch/test/acceptor_SUITE.erl	/^tcp_max_connections_and_beyond(_) ->$/;"	f	module:acceptor_SUITE
tcp_set_max_connections	deps/ranch/test/acceptor_SUITE.erl	/^tcp_set_max_connections(_) ->$/;"	f	module:acceptor_SUITE
tcp_upgrade	deps/ranch/test/acceptor_SUITE.erl	/^tcp_upgrade(_) ->$/;"	f	module:acceptor_SUITE
terminate	deps/ranch/src/ranch_server.erl	/^terminate(_Reason, _State) ->$/;"	f	module:ranch_server
test_one	deps/mochijson2/src/mochijson2.erl	/^test_one([], _N) ->$/;"	f	module:mochijson2
test_one	deps/mochijson2/src/mochijson2.erl	/^test_one([{E, J} | Rest], N) ->$/;"	f	module:mochijson2
tokenize	deps/mochijson2/src/mochijson2.erl	/^tokenize(B, S=#decoder{offset=O}) ->$/;"	f	module:mochijson2
tokenize_number	deps/mochijson2/src/mochijson2.erl	/^tokenize_number(B, S) ->$/;"	f	module:mochijson2
tokenize_number	deps/mochijson2/src/mochijson2.erl	/^tokenize_number(B, eint, S=#decoder{offset=O}, Acc) ->$/;"	f	module:mochijson2
tokenize_number	deps/mochijson2/src/mochijson2.erl	/^tokenize_number(B, eint1, S=#decoder{offset=O}, Acc) ->$/;"	f	module:mochijson2
tokenize_number	deps/mochijson2/src/mochijson2.erl	/^tokenize_number(B, esign, S=#decoder{offset=O}, Acc) ->$/;"	f	module:mochijson2
tokenize_number	deps/mochijson2/src/mochijson2.erl	/^tokenize_number(B, frac, S=#decoder{offset=O}, Acc) ->$/;"	f	module:mochijson2
tokenize_number	deps/mochijson2/src/mochijson2.erl	/^tokenize_number(B, frac1, S=#decoder{offset=O}, Acc) ->$/;"	f	module:mochijson2
tokenize_number	deps/mochijson2/src/mochijson2.erl	/^tokenize_number(B, int, S=#decoder{offset=O}, Acc) ->$/;"	f	module:mochijson2
tokenize_number	deps/mochijson2/src/mochijson2.erl	/^tokenize_number(B, int1, S=#decoder{offset=O}, Acc) ->$/;"	f	module:mochijson2
tokenize_number	deps/mochijson2/src/mochijson2.erl	/^tokenize_number(B, sign, S=#decoder{offset=O}, []) ->$/;"	f	module:mochijson2
tokenize_string	deps/mochijson2/src/mochijson2.erl	/^tokenize_string(B, S=#decoder{offset=O}) ->$/;"	f	module:mochijson2
tokenize_string	deps/mochijson2/src/mochijson2.erl	/^tokenize_string(B, S=#decoder{offset=O}, Acc) ->$/;"	f	module:mochijson2
tokenize_string_fast	deps/mochijson2/src/mochijson2.erl	/^tokenize_string_fast(B, O) ->$/;"	f	module:mochijson2
unihex	deps/mochijson2/src/mochijson2.erl	/^unihex(C) when C < 16#10000 ->$/;"	f	module:mochijson2
unihex	deps/mochijson2/src/mochijson2.erl	/^unihex(C) when C =< 16#10FFFF ->$/;"	f	module:mochijson2
unpack	deps/mochijson2/src/mochinum.erl	/^unpack(Float) ->$/;"	f	module:mochinum
unsafe_chars_test	deps/mochijson2/src/mochijson2.erl	/^unsafe_chars_test() ->$/;"	f	module:mochijson2
users_controller	src/users_controller.erl	/^-module(users_controller).$/;"	m
